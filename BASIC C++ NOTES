#include<iostream>
#include<cmath>
using namespace std;
int main(){
  int n;
  cout<<"enter the number :";
  cin>>n;

  bool isPrime=true;
  for(int i=2;i<=sqrt(n);i++){
      if(n%i==0){
        isPrime=false;
        break;
      }
  }
  if(isPrime==true){
    cout<<"prime number";

  }else(cout<<"non prime number");   
}



#include<iostream>
using namespace std;
 int main(){
    int n; 
    cout<<"enter the no:";
    cin>>n;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=n;j++){
            cout<<j;
        }
        cout<<endl;
    }
    return 0;
}


PRint the armstrong number 
#include <iostream>
using namespace std;

int main() {
    int num, n, cubesum = 0;
    cout << "Enter the number: ";
    cin >> num;

    n = num;  // Store the original number

    while (num > 0) {
        int lastDig = num % 10;
        cubesum += lastDig * lastDig * lastDig;
        num /= 10;
    }

    if (cubesum == n) {
        cout << "It is an Armstrong number." << endl;
    } else {
        cout << "Not an Armstrong number." << endl;
    }

    return 0;
}


Print fibonacci Number

#include<iostream>
using namespace std;
 int main(){
    int n;
    cout<<"enter the fibonnaci terms :";
    cin>>n;
    int a=0,b=1;
    cout<<"the fibonacci series is:";
    for (int i=0;i<n;i++){
        cout<<a<<" ";
        int next =a+b;
        a=b;
        b=next;
    }
    return 0;
}



#include<iostream>
using namespace std;
int main(){
    int n;
    cout<<"enter the no:";
    cin>>n;

    for(int i=0;i<n;i++){
        char ch ='A';
        for(int j=0;j<n;j++){
            cout<<ch;
            ch =ch+1;
        }
        cout<<endl;
    }

}



#include<iostream>
using namespace std;
int main(){
    int n;
    cout<<"enter the number:";
    cin>>n;
    int num=1;
    
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            cout<<num;
            num++;
            
        }
        cout<<endl;
    }
}



#include<iostream>
using namespace std;
int main(){
    int n;
    cout<<"enter the number:";
    cin>>n;
    char ch ='A';
    
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            cout<<ch;
            ch++;
            
        }
        cout<<endl;
    }
}



#include<iostream>
using namespace std;
 int main(){
    int n; 
    cout<<"enter the no:";
    cin>>n;

    for(int i=0;i<n;i++){
        for(int j=0;j<i+1;j++){
            cout<<"*";

        }
        cout<<endl;
    }
    return 0;
}




#include<iostream>
using namespace std;
 int main(){
    int n; 
    cout<<"enter the no:";
    cin>>n;
    
    for(int i=0;i<n;i++){
        for(int j=0;j<i+1;j++){
            cout<<(i+1);
            ;

        }
        cout<<endl;
    }
    return 0;
}



#include<iostream>
using namespace std;
 int main(){
    int n; 
    cout<<"enter the no:";
    cin>>n;
    char ch ='A';

    for(int i=0;i<n;i++){
        for(int j=0;j<i+1;j++){
            cout<<ch;
            
        }
        cout<<endl;
    }
    return 0;
}



#include<iostream>
using namespace std;
 int main(){
    int n; 
    cout<<"enter the no:";
    cin>>n;
    
    for(int i=0;i<n;i++){
        for(int j=1;j<=i+1;j++){
            cout<<j;
            
        }
        cout<<endl;
    }
    return 0;
}



#include<iostream>
using namespace std;
 int main(){
    int n; 
    cout<<"enter the no:";
    cin>>n;

    for(int i=0;i<n;i++){
        for(int j=i+1;j>0;j--){
            cout<<j;     

        }
        cout<<endl;
    }
    return 0;
}



// floyd triangle
#include<iostream>
using namespace std;
 int main(){
    int n; 
    cout<<"enter the no:";
    cin>>n;
    int num=1;

    for(int i=0;i<n;i++){
        for(int j=0;j<i+1;j++){
            cout<<num<<" ";
            num++;
        }
        cout<<endl;
    }
    return 0;
}



#include<iostream>
using namespace std;
 int main(){
    int n; 
    cout<<"enter the no:";
    cin>>n;
    char ch ='A';

    for(int i=0;i<n;i++){
        for(int j=0;j<i+1;j++){
            cout<<ch<<" ";
            ch++;

        }
        cout<<endl;
    }
    return 0;
}



#include<iostream>
using namespace std;
int main(){
    int n;
    cout<<"enter the nno:";
    cin>>n;

    for(int i=0;i<n;i++){
        for(int j=0;j<i;j++){
            cout<<" ";
        }
        for(int j=0;j<n-i;j++){
            cout<<i+1;
        }
        cout<<endl;
    }
}



#include<iostream>
using namespace std;
int main(){
    int n;
    cout<<"enter the nno:";
    cin>>n;
    char ch ='A';

    for(int i=0;i<n;i++){
        for(int j=0;j<i;j++){
            cout<<" ";
        }
        for(int j=0;j<n-i;j++){
            cout<<ch;
            ch++;
        }
        cout<<endl;
    }
}



// pyramid pattern 
#include<iostream>
using namespace std;
 int main(){
    int n;
    cout<<"enter the number";
    cin>>n;

    for(int i=0;i<n;i++){
        for(int j=0;j<n-i-1;j++){
           cout<<" ";//for spaces

        }
        for(int j=1;j<=(i+1);j++){
                cout<<j;//for part 1
                
            }
        for(int j=i;j>0;j--){
            cout<<j;//for part 2
        }
        cout<<endl;
    }
    return 0;
}



hollow diamond pattern (imp)
#include<iostream>
using namespace std;
 int main(){
    int n;
    cout<<"enter the no:";
    cin>>n;

    for(int i=0;i<n;i++){
        for(int j=0;j<n-i-1;j++){
            cout<<" ";
        }
        cout<<"*";

    if(i!=0){
        for(int j=0;j<2*i-1;j++){
            cout<<" ";
        }
        cout<<"*";
    }
    cout<<endl;
    }
    //bottom 
    for(int i=0;i<n-1;i++){
        for(int j=0;j<(i+1);j++){
            cout<<" ";

        }
        cout<<"*";
        if(i!=(n-2)){
            for(int j=0;j<2*(n-i)-5;j++){
            cout<<" ";

        }
        cout<<"*";
    }
        cout<<endl;
    }

    return 0;
}




butterfly pattern self written code confidence high one time run without any mistake
#include<iostream>
using namespace std;
 int main(){
    int n;
    cout<<"enter the no:";
    cin>>n;

    for(int i=0;i<n;i++){
        for(int j=0;j<(i+1);j++){
            cout<<"*";
        }
        for(int j=0;j<n-i-1;j++){
            cout<<" ";
        }
        if(i!=n){
         for(int j=n-i-1;j>0;j--){
            cout<<" ";
         }
         for(int j=(i+1);j>0;j--){
            cout<<"*";
         }
        }
        cout<<endl;
    }
    // bottom
    for(int i=0;i<n;i++){
    for(int j=0;j<n-i;j++){
        cout<<"*";
    }
    for(int j=0;j<i;j++){
        cout<<" ";
    }
    for(int j=i;j>0;j--){
        cout<<" ";
    }
     for(int j=n-i;j>0;j--){
        cout<<"*";
    }
     cout<<endl;
}
    return 0;
}


function 
#include<iostream>
using namespace std;
int SumofDigits(int num){
    int digitsum=0;
    while(num>0){
    int lastdigit=num%10;
    num/=10;
    digitsum+=lastdigit;
    }
    return digitsum;
    
}
 int main(){
    cout<<"digitSum="<<SumofDigits(1234)<<endl;
    return 0;
}



// array
// smallest element in array
// largest element in array
#include<iostream>
using namespace std;
int main(){
    int num[]={5, 2, 8, 1, 4};
    int size=5;
    
    int largest= INT8_MIN;
    int smallest = INT8_MAX ;

    for(int i=0;i<size;i++){
        if(num[i]<smallest){
            smallest=num[i];

        }
    }

     for(int i=0;i<size;i++){
        if(num[i]>largest){
           largest=num[i];

        }
    }


    cout<<"smallest= "<<smallest<<endl;
     cout<<"largest= "<<largest<<endl;
}

LINEAR SEARCH ALGORITHM

#include<iostream>
using namespace std;

int linearSearch(int arr[],int size,int target){
    for(int i=0;i<size;i++){
        if(arr[i]==target){
            return i;

        }
    }
    return -1;
}
int main(){
    int arr[]={1,2,3,4,5};
    int size=5;
    int target=4;

    cout<<linearSearch(arr,size,target)<<endl;
    return 0;
}


// reverse of the array

#include<iostream>
using namespace std;
void reverseArray(int arr[],int size){
    int start = 0 , end=size-1;

    while(start<end){
        swap(arr[start],arr[end]);
        start++;
        end--;
    }
}

 int main(){
    int arr[]={1,2,3,4,5};
    int size=5;

    reverseArray(arr,size);

    for(int i=0;i<size;i++){
        cout<<arr[i];
    }
    return 0;
}


// sum of all element in the array
#include<iostream>
using namespace std;
int sumOfArray(int arr[],int size){
    for(int i=0;i<size;i++){
        int sum=0;
        sum+=arr[i];
        cout<<sum;
    }
   return 0; 
 }
 int main(){
    int arr[]={1,2,3,4,5};
    int size=5;

    cout<<sumOfArray(arr,size)<<endl;

    return 0;
}


concepts of subarray kadane max subarray 
formula to calculate subarray=n(n+1)/2
#include<iostream>
#include<vector>
using namespace std ;
int main(){
    int n=5;
    int arr[5]={1,2,3,4,5};

    for(int st=0;st<n;st++){
        for(int end=st;end<n;end++){
            for(int i=st;i<=end;i++){
                cout<<arr[i];
                
            }
            cout<<" ";
        }
        cout<<endl;
    }


}

// binary search 
#include <iostream>
#include<vector>
using namespace std ;

int BinarySearch(vector<int>arr,int tar){
    int st=0,end=arr.size()-1;
    

    while(st<=end){
        int mid = st+(end-st)/2;
        if(tar>arr[mid]){
            st=mid+1;
        }else if(tar<arr[mid]){
            end=mid-1;
        }else{
            return mid;
        }
        
    }
    return -1;
}
int main (){
    // vector <int> arr1= {1,2,3,4,7,13,15};
    // // int tar1=13;
    vector<int> arr2={1,3,4,5,7};
    int tar2=5;

    cout<<BinarySearch(arr2,tar2)<<endl;

}



// Pointers 
#include<iostream>
#include<vector>
using namespace std;
 int main(){
    int a=5;
    int *p=&a;
    int **q=&p;

    cout<<*p<<endl;
    cout<<**q<<endl;
    cout<<p<<endl;
    cout<<*q<<endl;
    cout<<&a<<endl;
    
    return 0;
}
